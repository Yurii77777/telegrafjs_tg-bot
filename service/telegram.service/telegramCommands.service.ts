const { Markup } = require('telegraf');
const axios = require('axios');

import { bot } from '../../config/telegram.config';

import { User } from '../../model/user.model';

import { UserService } from '../user.service';
import { TelegramUtilsService } from '../telegram.service/telegramUtils.service';

import { TELEGRAM_BOT_BTN_ACTIONS } from '../../constants/telegramBotBtnActions';

export class TelegramCommandsService {
  private userService: UserService;
  private telegramUtilsService: TelegramUtilsService;

  constructor() {
    this.userService = new UserService();
    this.telegramUtilsService = new TelegramUtilsService();
  }

  async setBotCommands() {
    bot.telegram.setMyCommands([
      {
        command: '/start',
        description: "–î–ª—è —Å—Ç–∞—Ä—Ç—É | Let's start",
      },
      {
        command: '/set_language',
        description: "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º–æ–≤—É –±–æ—Ç–∞ | Set bot's language",
      },
    ]);
  }

  async handleStartCommand(ctx) {
    try {
      await ctx.reply('–ü—Ä–∏–≤—ñ—Ç!');
    } catch (error) {
      console.log('Error send message :::', error);
    }
  }

  async setLanguage(ctx) {
    // –°–∞–º–æ —Å–æ–±–æ—é, –≤ –ø–µ—Ä—à—É —á–µ—Ä–≥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —á–∏ —î —É –Ω–∞—Å –ë–î —Ç–∞–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    const { id: chatId } = ctx?.update?.message?.chat;
    let user: null | User = null;

    try {
      user = await this.userService.getUser({ chatId });
    } catch (error) {
      ctx.reply(this.telegramUtilsService.setBotMessage({ lang: 'ENG', message: 'DB_REQUEST_ERROR' }));

      return;
    }

    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –º–∞—î, –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –Ω—ñ–∫–æ–º—É –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –º–æ–≤—É
    if (!user) {
      try {
        ctx.reply(this.telegramUtilsService.setBotMessage({ lang: 'UA', message: 'USER_NOT_FOUND' }));
      } catch (error) {
        console.log('[Error send message] ::: ', error);
      }

      // –©–µ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ç–∞–∫–∏–π –ø—ñ–¥—Ö—ñ–¥ –±–µ–∑ —Å–µ–∫—Ü—ñ—ó else
      // –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–µ—Ç—å–æ—Ä–Ω–∏—Ç–∏ –ø–æ–¥–∞–ª—å—à–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É
      return;
    }

    // –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ —Ç—É—Ç –±—É–¥—É—Ç—å –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π —Ç–æ—á–Ω–æ —î —É –Ω–∞—Å –≤ –ë–î
    // –°—Ç–≤–æ—Ä—î–º–æ –∫–Ω–æ–ø–∫–∏, –º–∞—Å–∏–≤ –º–∞—Å–∏–≤—ñ–≤
    const keyboard = [
      [Markup.button.callback('–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶', `${TELEGRAM_BOT_BTN_ACTIONS.SET_LANG}lang=UA`)],
      [Markup.button.callback('English üá∫üá∏', `${TELEGRAM_BOT_BTN_ACTIONS.SET_LANG}lang=ENG`)],
    ];

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ó—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    try {
      await ctx.reply(
        // –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        this.telegramUtilsService.setBotMessage({ lang: 'UA', message: 'SET_LANGUAGE' }),
        // –¥—Ä—É–≥–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä inlineKeyboard
        Markup.inlineKeyboard(keyboard),
      );
    } catch (error) {
      console.log('[send keyboard setLanguage]', error.message);
    }
  }
}
